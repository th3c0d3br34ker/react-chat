{"version":3,"sources":["serviceWorker.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","SignIn","className","onClick","provider","GoogleAuthProvider","signInWithPopup","SignOut","currentUser","signOut","ChatRoom","dummy","useRef","messagesRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","uid","photoURL","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","msg","ChatMessage","key","id","message","ref","onSubmit","value","onChange","target","placeholder","type","disabled","aria-label","role","props","messageClass","src","alt","App","useAuthState","user","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"0MAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6GCPNC,IAASC,cAAc,CACrBC,OAAQ,0CACRC,WAAY,oCACZC,YAAa,2CACbC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGjB,IAAMC,EAAOV,IAASU,OAChBC,EAAYX,IAASW,YAsB3B,SAASC,IAMP,OACE,oCACE,4BAAQC,UAAU,UAAUC,QAPP,WACvB,IAAMC,EAAW,IAAIf,IAASU,KAAKM,mBACnCN,EAAKO,gBAAgBF,KAKnB,YACW,0BAAMF,UAAU,UAE3B,uBAAGA,UAAU,eAAb,4EAON,SAASK,IACP,OACER,EAAKS,aACH,4BAAQN,UAAU,WAAWC,QAAS,kBAAMJ,EAAKU,YAAjD,YAON,SAASC,IACP,IAAMC,EAAQC,mBACRC,EAAcb,EAAUc,WAAW,YACnCC,EAAQF,EAAYG,QAAQ,aAAaC,MAAM,IAHnC,EAKCC,YAAkBH,EAAO,CAAEI,QAAS,OAAhDC,EALW,sBAOgBC,mBAAS,IAPzB,mBAOXC,EAPW,KAOAC,EAPA,KASZC,EAAW,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DAClBD,EAAEE,iBADgB,EAGQ5B,EAAKS,YAAvBoB,EAHU,EAGVA,IAAKC,EAHK,EAGLA,SAHK,SAKZhB,EAAYiB,IAAI,CACpBC,KAAMT,EACNU,UAAW3C,IAASW,UAAUiC,WAAWC,kBACzCN,MACAC,aATgB,OAYlBN,EAAa,IACbZ,EAAMwB,QAAQC,eAAe,CAAEC,SAAU,WAbvB,2CAAH,sDAgBjB,OACE,oCACE,8BACGjB,GACCA,EAASkB,KAAI,SAACC,GAAD,OAAS,kBAACC,EAAD,CAAaC,IAAKF,EAAIG,GAAIC,QAASJ,OAE3D,0BAAMK,IAAKjC,KAGb,0BAAMkC,SAAUrB,GACd,2BACEsB,MAAOxB,EACPyB,SAAU,SAACtB,GAAD,OAAOF,EAAaE,EAAEuB,OAAOF,QACvCG,YAAY,uBAGd,4BAAQC,KAAK,SAASC,UAAW7B,GAC/B,0BAAM8B,aAAW,OAAOC,KAAK,OAA7B,yBASV,SAASb,EAAYc,GAAQ,IAAD,EACMA,EAAMX,QAA9BZ,EADkB,EAClBA,KAAMH,EADY,EACZA,IAAKC,EADO,EACPA,SAEb0B,EAAe3B,IAAQ7B,EAAKS,YAAYoB,IAAM,OAAS,WAE7D,OACE,oCACE,yBAAK1B,UAAS,kBAAaqD,IACzB,yBAAKC,IAAK3B,EAAU4B,IAAI,YACxB,2BAAI1B,KAMG2B,MAjHf,WAAgB,IAAD,EACEC,YAAa5D,GAArB6D,EADM,oBAGb,OACE,yBAAK1D,UAAU,OACb,gCACE,4BACE,0BAAMmD,KAAK,MAAMD,aAAW,WAA5B,8BAIF,kBAAC7C,EAAD,OAGF,iCAAUqD,EAAO,kBAAClD,EAAD,MAAe,kBAACT,EAAD,S,eChCtC4D,EAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SFuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAM9B,c","file":"static/js/main.1dad5f8c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import \"./App.css\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/analytics\";\r\n\r\nimport React, { useRef, useState } from \"react\";\r\n\r\nimport firebase from \"firebase/app\";\r\nimport { useAuthState } from \"react-firebase-hooks/auth\";\r\nimport { useCollectionData } from \"react-firebase-hooks/firestore\";\r\n\r\nfirebase.initializeApp({\r\n  apiKey: \"AIzaSyDq7uCAtWtM5Ah8Rz5hDqcGMjnW0dFUI0o\",\r\n  authDomain: \"jainam-react-chat.firebaseapp.com\",\r\n  databaseURL: \"https://jainam-react-chat.firebaseio.com\",\r\n  projectId: \"jainam-react-chat\",\r\n  storageBucket: \"jainam-react-chat.appspot.com\",\r\n  messagingSenderId: \"427662332496\",\r\n  appId: \"1:427662332496:web:f194dd2242265d1f713755\",\r\n  measurementId: \"G-JZD5RNTX6H\",\r\n});\r\n\r\nconst auth = firebase.auth();\r\nconst firestore = firebase.firestore();\r\n// const analytics = firebase.analytics();\r\n\r\nfunction App() {\r\n  const [user] = useAuthState(auth);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <h1>\r\n          <span role=\"img\" aria-label=\"Heading\">\r\n            Jainam's 💬 App\r\n          </span>\r\n        </h1>\r\n        <SignOut />\r\n      </header>\r\n\r\n      <section>{user ? <ChatRoom /> : <SignIn />}</section>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction SignIn() {\r\n  const signInWithGoogle = () => {\r\n    const provider = new firebase.auth.GoogleAuthProvider();\r\n    auth.signInWithPopup(provider);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <button className=\"sign-in\" onClick={signInWithGoogle}>\r\n        Sign In: <span className=\"icon\" />\r\n      </button>\r\n      <p className=\"text-center\">\r\n        Do not violate the community guidelines or you will be banned for life!\r\n      </p>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction SignOut() {\r\n  return (\r\n    auth.currentUser && (\r\n      <button className=\"sign-out\" onClick={() => auth.signOut()}>\r\n        Sign Out\r\n      </button>\r\n    )\r\n  );\r\n}\r\n\r\nfunction ChatRoom() {\r\n  const dummy = useRef();\r\n  const messagesRef = firestore.collection(\"messages\");\r\n  const query = messagesRef.orderBy(\"createdAt\").limit(25);\r\n\r\n  const [messages] = useCollectionData(query, { idField: \"id\" });\r\n\r\n  const [formValue, setFormValue] = useState(\"\");\r\n\r\n  const sendMessage = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const { uid, photoURL } = auth.currentUser;\r\n\r\n    await messagesRef.add({\r\n      text: formValue,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n      uid,\r\n      photoURL,\r\n    });\r\n\r\n    setFormValue(\"\");\r\n    dummy.current.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <main>\r\n        {messages &&\r\n          messages.map((msg) => <ChatMessage key={msg.id} message={msg} />)}\r\n\r\n        <span ref={dummy}></span>\r\n      </main>\r\n\r\n      <form onSubmit={sendMessage}>\r\n        <input\r\n          value={formValue}\r\n          onChange={(e) => setFormValue(e.target.value)}\r\n          placeholder=\"say something nice\"\r\n        />\r\n\r\n        <button type=\"submit\" disabled={!formValue}>\r\n          <span aria-label=\"Send\" role=\"img\">\r\n            🕊️\r\n          </span>\r\n        </button>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction ChatMessage(props) {\r\n  const { text, uid, photoURL } = props.message;\r\n\r\n  const messageClass = uid === auth.currentUser.uid ? \"sent\" : \"received\";\r\n\r\n  return (\r\n    <>\r\n      <div className={`message ${messageClass}`}>\r\n        <img src={photoURL} alt=\"profile\" />\r\n        <p>{text}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import \"./index.css\";\r\n\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport App from \"./App\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}